package oneKeySer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Properties;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

public class Utils {
	
	private static final Logger logger = LogManager.getLogger(Utils.class);

	
	public static String getProperty(String path,String key) throws IOException{
		File file = new File(path);
		if(!file.exists()){
			logger.warn("no find key '" + key +"' in configuration file '" + path +  "' , use default value ");
			return null;
		}
		FileInputStream fis = new FileInputStream(file);
		Properties prop = new Properties();
		prop.load(fis);
		String value = prop.getProperty(key);
		prop.clear();
		fis.close();
		return value;
	}
	
	public static String getConfig(String key){
		//String configpath = Thread.currentThread().getContextClassLoader().getResource("config.properties").getPath();
		String path=new File("").getAbsoluteFile().getPath() + "/config.properties";


		try {
			return getProperty(path,key);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static String readTxtFile(String filePath) {
		StringBuffer sb = new StringBuffer();
		try {
			String encoding = "UTF-8";
			File file = new File(filePath);
			if (file.isFile() && file.exists()) { // 判断文件是否存在
				InputStreamReader read = new InputStreamReader(new FileInputStream(file), encoding);// 考虑到编码格式
				BufferedReader bufferedReader = new BufferedReader(read);
				String lineTxt = null;
				while ((lineTxt = bufferedReader.readLine()) != null) {
					//System.out.println(lineTxt);
					sb.append(lineTxt + "\r\n");
				}
				read.close();
			} else {
				logger.error("找不到指定的文件" + filePath);
			}
		} catch (Exception e) {
			logger.error("读取文件内容出错");
			e.printStackTrace();
		}

		return sb.toString();
	}
}
