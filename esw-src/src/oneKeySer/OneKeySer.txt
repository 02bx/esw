package oneKeySer;

import java.io.File;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;


public class OneKeySer {

	
	private static final Logger logger = LogManager.getLogger(OneKeySer.class);

	private static WebDriver driver;
	
	public static void main(String[] args) {
		
		//String basePath = "E:\\oneKey";
		String basePath=new File("").getAbsoluteFile().getPath();
		//String basePath=new File("WebContent/WEB-INF").getAbsoluteFile().getPath();

		String chromeDriverPath = basePath + "/driver/chromedriver.exe";
		String ieDriverPath = basePath + "/driver/chromedriver.exe";
		
		String browser = Utils.getConfig("browser");
		String defUrl = Utils.getConfig("defUrl");
		String types = Utils.getConfig("types");
		String jqCdn = Utils.getConfig("jqCdn");
		String title = Utils.getConfig("title");
		String collectInterval = Utils.getConfig("collectInterval");
		
		if(StringUtils.isEmpty(defUrl)){
			defUrl = "127.0.0.1/start.html";
		}
		if(StringUtils.isEmpty(jqCdn)){
			defUrl = "http://libs.baidu.com/jquery/2.1.1/jquery.min.js";
		}
		if(StringUtils.isEmpty(title)){
			title = "oneKey";
		}
		int collectInt = 3000;
		if(!StringUtils.isEmpty(collectInterval)){
			try {
				collectInt = Integer.valueOf(collectInterval);				
			} catch (Exception e) {
			}
		}
		//所有模块
		String model = Utils.readTxtFile(basePath + "/model.js");
		String getX = Utils.readTxtFile(basePath +  "/model/getX.js");
		
		logger.info("basePath:" + basePath + " " );
		logger.info("model:" + model + " " );
		logger.info("chromeDriverPath:" + chromeDriverPath + " " );
		logger.info("ieDriverPath:" + ieDriverPath + " " );
		logger.info("browser:" + browser + " " );
		logger.info("defUrl:" + defUrl + " " );
		logger.info("types:" + types + " " );
		logger.info("jqCdn:" + jqCdn + " " );
		logger.info("title:" + title + " " );
		logger.info("collectInt:" + collectInt + " " );

		String[] typeArr = types.split(",");
		String[] jss = model.split(",");
		String hlight = "";
		String hlightWithJq = "";
		String jqueryStr = "var script = document.createElement(\"script\");" + "script.type = \"text/javascript\";" 
				+ "script.src = \"" + jqCdn + "\";" 
				+ "document.getElementsByTagName(\"head\")[0].appendChild(script);";
		
		String hlightModel = Utils.readTxtFile(basePath + "/model/hlight.js");
		for(int i=0;i<typeArr.length;i++){
			hlight = hlight + hlightModel.replaceAll("HLTYPE", typeArr[i]);
		}
		
		for(int i=0;i<jss.length;i++){
			File file = new File(basePath + "/model/" + jss[i]);
			if(!file.exists()){
				logger.warn("file:" + jss[i] + " not exists in model" );
				continue;
			}
			hlight =hlight +  Utils.readTxtFile(basePath + "/model/" + jss[i]);
			logger.info("file:" + jss[i] + " " );
			//logger.info("script:" + hlight + " ");
		}
		
		//最终执行的js
		hlight = getX + hlight;
		hlightWithJq = jqueryStr + hlight;
		logger.info("scripts no jq:" + hlight);
		logger.info("scripts with jq:" + hlightWithJq);

		
		if(browser.equalsIgnoreCase("chrome")){
			ChromeOptions options = new ChromeOptions();
			options.addArguments("disable-infobars");
			System.setProperty("webdriver.chrome.driver", chromeDriverPath);
			driver = new ChromeDriver(options);
		}else if(browser.equalsIgnoreCase("ie")){
			System.setProperty("webdriver.ie.driver", ieDriverPath);
			driver = new InternetExplorerDriver(); 	
		}else if(browser.equalsIgnoreCase("firefox")){
			driver = new FirefoxDriver();
		}else{
			logger.error("browser type error:" + "ie,chrome or firefox");
			return;
		}
		
		driver.get(defUrl);
		
		
		JavascriptExecutor js = (JavascriptExecutor)driver;
		switchWin(title);
		int iiframesNum = 0;
		List<WebElement> iiframes = null;
		
		while (true) {
			try {
				logger.info("sleep " + collectInt + "...");
				Thread.sleep(collectInt);
				//默认
				driver.switchTo().defaultContent();
				driver.switchTo().frame("mainPage");
				js.executeScript(hlight);
				//frame
				iiframes = driver.findElements(By.tagName("iframe"));
				logger.info("find frames ..." + iiframes.size() + ", iiframesNum: " + iiframesNum);
				if (iiframes.size() != 0) {
					/*if (iiframesNum == 0 &&  iiframesNum != iiframes.size()) {//first
						for(int i=0;i<iiframes.size();i++){
							logger.info("切换至 iframe " + (i + 1));
							driver.switchTo().frame(i); 
							js.executeScript(hlight);
						}
						iiframesNum = iiframes.size();
					
					}else if(iiframesNum != 0 &&  iiframesNum != iiframes.size() &&  iiframesNum < iiframes.size()){ //新打开
						logger.info("切换至 iframe " + (iiframes.size() + 1));
						driver.switchTo().frame((iiframes.size() - 1)); 
						js.executeScript(hlight);
						iiframesNum = iiframes.size();
						
					}else {
						logger.info("over ...");
					}*/
					
					for(int i=0;i<iiframes.size();i++){
						logger.info("切换至 iframe " + (i + 1));
						driver.switchTo().defaultContent();
						driver.switchTo().frame("mainPage");
						driver.switchTo().frame(i); 
						js.executeScript(hlight);
						logger.info("切换 iframe 执行完毕" + (i + 1));

					}

				} /*else {
					logger.info("not find frames ...");
					js.executeScript(hlight);
				}*/
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
			}
		}
	}
	

	private static void switchWin(String title){
		Set<String> handles = driver.getWindowHandles();
		for (String s : handles) {
			if(driver.getTitle().contains(title)){
				driver.switchTo().window(s);
				break;
			}
		}
		
	}
	
	
	

	
	
	
}
